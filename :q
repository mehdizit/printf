#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include "holberton.h"
/**
* _puts - print a string
* @str: str
*
* Return: void
*/

void _puts(char *str)
{
	unsigned int i;

	if (!str)
	{
		_putchar('N');
		_putchar('U');
		_putchar('L');
		_putchar('L');
		exit(98);
	}
	/*
	if (*str == '\0')
	{
		_putchar('\'');
		_putchar('\'');
		exit(98);
	}
	*/
	for (i = 0; str[i]; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');

}
/**
* convertBase - convert a positice integer to any base
* @num: unsigned int to convert
* @base: (2 - 8 - 10 - 16)
* Return: str
*/

char *convertBase(unsigned int num, int base)
{
	char bases[] = "0123456789ABCDEF";

	char *ptr, *buffer;
	int i;

	buffer = malloc(sizeof(char) * 50);
	/* filling the array from the end to the start*/
	ptr = &buffer[49];
	*ptr = '\0';

	do {
		/* *--ptr   is executed before the assainment do*/
		*--ptr = bases[num % base]; /* base[48] = 'reste' */
		num /= base; /* our counter */
	} while (num != 0);

	/* we are not traiting the negative int*/



	return (ptr);
}

/**
* _putchar - print single char
* @c: char
*
* Return: int
*/

int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
* _atoi - transform a str of numbers to a numeric integer
* @s: string
*
* Return: int
*/

int _atoi(char *s)
{

	int j, firstNumber = 1, negatif = 1;
	unsigned int num = 0;

	j = 0;
	while (s[j] && firstNumber)
	{
		if (s[j] == '-' && !num)
			negatif *= -1;
		if (s[j] >= '0' && s[j] <= '9' && firstNumber)
		{
			num *= 10;
			num += s[j] - '0';
		}
		else if (num > 0)
			firstNumber = 0;
		j++;
	};
	num *= negatif;
	return (num);
}
/**
* _strlen - return the length of the string
* @str: str
*
* Return: length except '\0'
*/

int _strlen(char *str)
{
	unsigned int i;

	for (i = 0; str[i]; i++)
	;
	return (i);
}
/**
* concatAt - concat *src to *des at position pos
* @pos: position from where we cant to concat
*
* Return: str
*/

char *concatAt(int pos, const char *des, char *src)
{

	int i, j, k;
	int len1 = 0, len2 = 0, newStrLength = 0;
	char *newStr;

	if (!src)
		src = "";
	if (!des)
		des = "";
	for (len1 = 0; des[len1]; len1++)
	;
	for (len2= 0; src[len2]; len2++)
	;
	newStrLength = len1 + len2;
	if (*src == '\0')
		return ((char *)des);
	if (pos > len1)
		return ("cant concat");

	newStr = malloc(sizeof(char) * (newStrLength + 1));
	for (i = 0 , j = 0, k = 0; i < newStrLength ; i++)
	{
		if (src[k] && i > pos)
		{
			newStr[i] = src[k];
			k++;
		}
		else
		{
			newStr[i] = des[j];
			j++;
		}
	}
	newStr[i] = '\0';
	return (newStr);
}
/**
* cleanTypeArg - delete any char between % and type (f, d , x ...)
* @format: str
*
* Return: str
*/

char *cleanTypeArg(const char *format)
{
	unsigned int i, j, k , nb = 0, len = 0;
	char type[] = "sdifxulc";
	char *p;
	for (len = 0; format[len]; len++)
	;
	p = malloc(sizeof(char) * (len + 1));


	for (i = 0; format[i]; i++)
		p[i] = format[i];
	p[i] = '\0';

	for (i = 0, j = 0;  i < 20;i++)
	{
		if (p[i] == '%')
		{
			for (j = 0; j < 9; j++)
			{
				for (k = 0; p[i + k]; k++)
				{
					if (p[i + k] == type[j])
					{
						nb = k + 1;
						printf(" nb = %d\n", nb);
						break;
					}
				}
			}

		}
		p[i] = p[i + nb];
	}
	
	return (p);
}
/**
* X - 
* @a: 
*
* Return:
*/

char *clean(const char *format)
{
	unsigned int i, j, k , nb = 0, len = 0;
	char type[] = "sdifxulc";
	char *p, *p2;
	for (len = 0; format[len]; len++)
	;
	p = malloc(sizeof(char) * (len + 1));


	for (i = 0; format[i]; i++)
		p[i] = format[i];
	p[i] = '\0';
	
	for (i = 0; p[i]; i++)
	{
		p[i] = p[i + k];

		if (p[i] == '%')
		{
			for (j = 0; type[j]; j++)
			{
				printf(" p[%c] = type[%c]  \n", p[i + j], type[j]);
			}
		}

	}

	return (p);
}
/**
* main - create my own printf
* @argc: nb of arguments
* @argv: arguments
*
* Return: 0
* Error: 1
*/
int main(int argc, char *argv[])
{

	unsigned int res, i;
	char *p, *ptr;


	p = clean("%.1f;%2d;");
	printf(" p = %s\n", p);
	/*
	_putchar('\n');
	
	_printf("4 %s ", "this is string " );
	_putchar('\n');
	_printf("5 %s %c %c", "string", '*', '4');
	_putchar('\n');
	_printf("6 %d ", 210);
	_putchar('\n');
	_printf("7%i", 053);
	_putchar('\n');
	_printf("8 \n");
	_printf("9\n");
	*/
	
	return (0);
}
/*
int at(char *s)
{
	int num, i;
	for (i = 0; s[i]; ++i)
	;
	printf(" i = %d \t num = %d \n", i - 1, *s -'0');
	
	printf(" sum = %d\n", 10 * (i - 1) * (*s - '0'));
	if (!*(s))
		return (0);

	return (((10 * (i ) * num)  ) +  at(s + 1));
	
}
*/

